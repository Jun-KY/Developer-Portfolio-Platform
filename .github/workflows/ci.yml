name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: appdb
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: apppass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U appuser -d appdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      # 테스트에서 사용할 DB 연결값을 환경변수로 주입
      - name: Configure DB env for tests
        run: |
          echo "SPRING_PROFILES_ACTIVE=test" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/appdb" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=appuser" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=apppass" >> $GITHUB_ENV

      # AWS SDK region 오류 방지 (더미 값)
      - name: Configure AWS env (dummy)
        run: |
          echo "AWS_ACCESS_KEY_ID=dummy" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=dummy" >> $GITHUB_ENV
          echo "AWS_REGION=ap-northeast-2" >> $GITHUB_ENV

      - name: Gradle wrapper permission
        working-directory: backend
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
          fi

      - name: Build & Test (Gradle)
        working-directory: backend
        run: |
          ./gradlew -Dspring.profiles.active=test clean build test --no-daemon || \
          gradle -Dspring.profiles.active=test clean build test

      # (선택) 커밋 상태 리포팅 — 제가 API로 성공/실패를 바로 확인할 수 있게 해줍니다.
      - name: Report commit status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ job.status }}';
            const state = conclusion === 'success' ? 'success' :
                          conclusion === 'cancelled' ? 'error' : 'failure';
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state,
              context: 'ci/backend',
              description: `Backend: ${conclusion}`
            });
