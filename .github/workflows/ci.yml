name: CI

on:
  workflow_dispatch: {}
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  backend:
    name: Backend Build & Test (auto-detect)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: appdb
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: apppass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U appuser -d appdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect backend (Maven/Gradle)
        id: detect_backend
        shell: bash
        run: |
          set -e
          POM=$(git ls-files | grep -E '(^|.*/)(pom\.xml)$' | head -n1 || true)
          GRADLE=$(git ls-files | grep -E '(^|.*/)(build\.gradle(\.kts)?)$' | head -n1 || true)

          if [ -n "$POM" ]; then
            echo "tool=maven" >> $GITHUB_OUTPUT
            echo "dir=$(dirname "$POM")" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ -n "$GRADLE" ]; then
            echo "tool=gradle" >> $GITHUB_OUTPUT
            echo "dir=$(dirname "$GRADLE")" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "tool=none" >> $GITHUB_OUTPUT
          echo "dir=" >> $GITHUB_OUTPUT
          echo "No backend build file (pom.xml or build.gradle) found. Skipping backend job."
          exit 0

      - name: Set up JDK
        if: steps.detect_backend.outputs.tool != 'none'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: ${{ steps.detect_backend.outputs.tool == 'maven' && 'maven' || 'gradle' }}

      - name: Configure DB env for tests
        if: steps.detect_backend.outputs.tool != 'none'
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/appdb" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=appuser" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=apppass" >> $GITHUB_ENV

      - name: Build & Test (Maven)
        if: steps.detect_backend.outputs.tool == 'maven'
        working-directory: ${{ steps.detect_backend.outputs.dir }}
        run: mvn -B -q -Dspring.profiles.active=test clean verify

      - name: Build & Test (Gradle)
        if: steps.detect_backend.outputs.tool == 'gradle'
        working-directory: ${{ steps.detect_backend.outputs.dir }}
        run: |
          [ -x "./gradlew" ] || echo "Gradle wrapper not found; trying system gradle if available"
          ./gradlew -Dspring.profiles.active=test clean build test --no-daemon || gradle -Dspring.profiles.active=test clean build test

  frontend:
    name: Frontend Build (auto-detect)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect frontend (package.json & lock file)
        id: detect_fe
        shell: bash
        run: |
          set -e
          PKG=$(git ls-files | grep -E '(^|.*/)(package\.json)$' | head -n1 || true)
          if [ -n "$PKG" ]; then
            DIR=$(dirname "$PKG")
            echo "found=true" >> $GITHUB_OUTPUT
            echo "path=$DIR" >> $GITHUB_OUTPUT

            LOCK=$(git ls-files | grep -E "^${DIR}/(package-lock\.json|npm-shrinkwrap\.json|yarn\.lock)$" | head -n1 || true)
            if [ -n "$LOCK" ]; then
              echo "lock=true" >> $GITHUB_OUTPUT
              echo "lockfile=$LOCK" >> $GITHUB_OUTPUT
            else
              echo "lock=false" >> $GITHUB_OUTPUT
              echo "lockfile=" >> $GITHUB_OUTPUT
            fi
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "path=" >> $GITHUB_OUTPUT
            echo "lock=false" >> $GITHUB_OUTPUT
            echo "lockfile=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node
        if: steps.detect_fe.outputs.found == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Cache node_modules (when lockfile exists)
        if: steps.detect_fe.outputs.found == 'true' && steps.detect_fe.outputs.lock == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ steps.detect_fe.outputs.path }}/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles(steps.detect_fe.outputs.lockfile) }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install deps
        if: steps.detect_fe.outputs.found == 'true'
        working-directory: ${{ steps.detect_fe.outputs.path }}
        run: |
          if [ -f "yarn.lock" ]; then
            yarn install --frozen-lockfile || yarn install
          elif [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ]; then
            npm ci || npm install
          else
            npm install
          fi

      - name: Build
        if: steps.detect_fe.outputs.found == 'true'
        working-directory: ${{ steps.detect_fe.outputs.path }}
        run: |
          npm run build || npm run build:prod || echo "No build script, skipping"
