name: CI
on:
  push: { branches: [ master ] }
  pull_request: { branches: [ master ] }

jobs:
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: appdb
          POSTGRES_USER: appuser
          POSTGRES_PASSWORD: apppass
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd="pg_isready -U appuser -d appdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven   # Gradle이면 gradle 로 교체
      - name: Configure DB env for tests
        run: |
          echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/appdb" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=appuser" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_PASSWORD=apppass" >> $GITHUB_ENV
      - name: Build & Test (Maven)
        if: hashFiles('**/pom.xml') != ''
        run: mvn -B -q -Dspring.profiles.active=test clean verify
      - name: Build & Test (Gradle)
        if: hashFiles('**/build.gradle*') != ''
        run: |
          ./gradlew --version || echo "Gradle wrapper not found"
          ./gradlew -Dspring.profiles.active=test clean build test --no-daemon

  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Detect package.json
        id: pkg
        run: |
          FILE=$(git ls-files | grep -E '(^|/)package.json$' | head -n1 || true)
          if [ -n "$FILE" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "path=$(dirname $FILE)" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      - name: Install & Build
        if: steps.pkg.outputs.found == 'true'
        working-directory: ${{ steps.pkg.outputs.path }}
        run: |
          npm ci || npm install
          npm run build || npm run build:prod || echo "No build script, skipping"
